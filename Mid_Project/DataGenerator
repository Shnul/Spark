from time import sleep
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.types import StructType, StructField, IntegerType, LongType, StringType, TimestampType
import random
import uuid

schema = StructType([
    StructField('car_id', StringType(), True),
    StructField('driver_id', LongType(), True),
    StructField('model_id', IntegerType(), True),
    StructField('color_id', IntegerType(), True)
])

spark = SparkSession\
    .builder\
    .master("local[*]")\
    .appName('DataGenerator')\
    .config('spark.jars.packages', 'org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.2') \
    .getOrCreate()   

car_data = spark.read.schema(schema).parquet('s3a://mid.project/ex1_parquet/CarsGenerator/')

car_data.cache()

while True:
    car_data = car_data.withColumn('event_id', F.lit(str(uuid.uuid4()))) \
                       .withColumn('event_time', F.current_timestamp()) \
                       .withColumn('speed', F.lit(random.randint(0, 200))) \
                       .withColumn('rpm', F.lit(random.randint(0, 8000))) \
                       .withColumn('gear', F.lit(random.randint(1, 7)))

    car_data.show()
   
    car_data_json = car_data.select(F.to_json(F.struct("*")).alias("value"))

    car_data_json.write \
                 .format("kafka") \
                 .option("kafka.bootstrap.servers", "course-kafka:9092") \
                 .option("topic", "sensors-sample") \
                 .option("checkpointLocation", "s3a://mid.project/checkpoints/car_data_json") \
                 .mode("append") \
                 .save()
    
    print("Iteration complete, sleeping for 1 second...")
    sleep(1)

spark.stop()
